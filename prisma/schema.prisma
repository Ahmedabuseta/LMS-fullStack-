// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  relationMode = "prisma"
}
model Attachment {
  id String @id @default(uuid())
  name String
  url String 
  courseId String
  course Course @relation(fields: [courseId], references: [id] ,onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([courseId])
}
model Categoery{
  id String @id @default(uuid())
  name String @unique
  courses Course[]
}
model Course {
  id String @id @default(uuid())
  userId String
  title String @db.Text
  description String? @db.Text
  imageUrl String? @db.Text
  price Float?
  isPublished Boolean @default(false)

  categoeryId String?
  categoery Categoery? @relation(fields: [categoeryId], references: [id])
  @@index([categoeryId])

  attachments Attachment[]
  chapters Chapter[]

  purshase Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


}
model Chapter {
  id String @id @default(uuid())
  title String
  description String? @db.Text
  videoUrl String? @db.Text
  postion Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)

  muxData MuxData?

  courseId String
  course Course @relation(fields: [courseId], references: [id],onDelete: Cascade)

  userProgress UserProgress[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}
model MuxData {
  id String @id @default(uuid())
  assestId String 
  playbackId String?

  chapterId String @unique
  chapter Chapter @relation(fields: [chapterId], references: [id] ,onDelete: Cascade)

}

model UserProgress {
  id String @id @default(uuid())
    userId String

  chapterId String
  chapter Chapter @relation(fields: [chapterId], references: [id] ,onDelete: Cascade)
 
  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([chapterId])
  @@unique([chapterId,userId])
}

model Purchase {
  id String @id @default(uuid())
  userId String
  courseId String
  course Course @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([userId])
  @@index([courseId])
  @@unique([userId,courseId])
}

model StripeCustomer{

  id String @id @default(uuid())
  userId String @unique
  stripeCustomerId String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}